create_plots = TRUE,
metric = "NCRR",
ncol = 2,
nrow = NULL) {
# Load required libraries
library(dplyr)
library(ggplot2)
# Ensure output type is valid
output_type <- match.arg(output_type)
# Filter by scenarios
if (!is.null(scenario_list)) {
data <- data %>%
filter(scenario %in% scenario_list)
}
# Filter by regions
if (!is.null(region_list)) {
data <- data %>%
filter(region %in% region_list)
}
# Filter by years
if (!is.null(year_list)) {
data <- data %>%
filter(year %in% year_list)
}
# Summarize lifecycle metrics
summary <- data %>%
group_by(Technology, scenario, region, year) %>%
summarize(
Total_Lifecycle_Emissions = sum(Total_Lifecycle_Emissions, na.rm = TRUE),
Avg_Net_Removal_Efficiency = mean(Net_Removal_Efficiency, na.rm = TRUE),
Avg_NCRR = mean(NCRR, na.rm = TRUE)
)
# Generate plots if requested
plot <- NULL
if (create_plots) {
plot <- summary %>%
ggplot(aes(x = year, y = .data[[metric]], color = scenario)) +
geom_line() +
facet_wrap(~ region, ncol = ncol, nrow = nrow) +
labs(
title = paste("Lifecycle Metrics: ", metric),
x = "Year",
y = metric
) +
theme_minimal()
}
# Save output if requested
if (!is.null(output_path) && output_type == "csv") {
write.csv(summary, file.path(output_path, "cdr_lifecycle_summary.csv"), row.names = FALSE)
}
# Return results and plot
return(list(summary = summary, plot = plot))
}
devtools::document()
devtools::install()
# Test the function with filtering and visualization
results <- calculate_cdr_lifecycle_metrics(
data = CDR_Lifecycle,                     # Input dataset
scenario_list = c("Baseline", "NetZero"), # Example scenarios
region_list = c("North America", "Europe"), # Example regions
year_list = c(2025, 2030, 2050),          # Example years
output_path = "path/to/output",           # Directory to save output
output_type = "list",                     # Output as a list
create_plots = TRUE,                      # Enable plot generation
metric = "NCRR",                          # Plot the NCRR metric
ncol = 2                                  # Number of columns for facets
)
# Test the function with filtering and visualization
results <- calculate_cdr_lifecycle_metrics(
data = CDR_Lifecycle,                     # Input dataset
scenario_list = c("Baseline", "NetZero"), # Example scenarios
region_list = c("North America", "Europe"), # Example regions
year_list = c(2025, 2030, 2050),          # Example years
output_path = "path/to/output",           # Directory to save output
output_type = "list",                     # Output as a list
create_plots = TRUE,                      # Enable plot generation
metric = "NCRR",                          # Plot the NCRR metric
ncol = 2                                  # Number of columns for facets
)
# Test the function with filtering and visualization
results <- calculate_cdr_lifecycle_metrics(
data = CDR_Lifecycle,                     # Input dataset
scenario_list = c("Baseline", "NetZero"), # Example scenarios
region_list = c("North America", "Europe"), # Example regions
year_list = c(2025, 2030, 2050),          # Example years
output_path = "path/to/output",           # Directory to save output
output_type = "list",                     # Output as a list
create_plots = TRUE,                      # Enable plot generation
metric = "NCRR",                          # Plot the NCRR metric
ncol = 2                                  # Number of columns for facets
)
output_type <- match.arg(output_type, several.ok = TRUE)
output_type <- match.arg(output_type, several.ok = TRUE)
#' Function to Calculate and Summarize CDR Lifecycle Metrics
#'
#' This function calculates lifecycle emissions metrics such as total lifecycle emissions,
#' net removal efficiency, and Net Carbon Removal Ratio (NCRR) for Carbon Dioxide Removal (CDR) technologies.
#' Optionally filters data by scenarios, regions, or years and generates visualizations.
#'
#' @param data A data frame containing lifecycle emissions data for CDR technologies.
#' @param scenario_list List of scenarios to filter. Default is NULL (all scenarios).
#' @param region_list List of regions to filter. Default is NULL (all regions).
#' @param year_list List of years to filter. Default is NULL (all years).
#' @param output_path Path to save output files (optional).
#' @param output_type Output format, either "csv" or "list". Default is "list".
#' @param create_plots Logical, if TRUE, generates plots for the results. Default is TRUE.
#' @param metric The metric to visualize in plots. One of "Total_Lifecycle_Emissions",
#'   "Net_Removal_Efficiency", "NCRR". Default is "NCRR".
#' @param ncol Number of columns for the facets in the plots. Default is 2.
#' @param nrow Number of rows for the facets in the plots. Default is NULL.
#' @return A list containing the summarized data and optional plots.
#' @import dplyr ggplot2
#' @export
calculate_cdr_lifecycle_metrics <- function(data,
scenario_list = NULL,
region_list = NULL,
year_list = NULL,
output_path = NULL,
output_type = c("csv", "list"),
create_plots = TRUE,
metric = "NCRR",
ncol = 2,
nrow = NULL) {
# Load required libraries
library(dplyr)
library(ggplot2)
# Ensure output type is valid
output_type <- match.arg(output_type, several.ok = TRUE)
# Filter by scenarios
if (!is.null(scenario_list)) {
data <- data %>%
filter(scenario %in% scenario_list)
}
# Filter by regions
if (!is.null(region_list)) {
data <- data %>%
filter(region %in% region_list)
}
# Filter by years
if (!is.null(year_list)) {
data <- data %>%
filter(year %in% year_list)
}
# Summarize lifecycle metrics
summary <- data %>%
group_by(Technology, scenario, region, year) %>%
summarize(
Total_Lifecycle_Emissions = sum(Total_Lifecycle_Emissions, na.rm = TRUE),
Avg_Net_Removal_Efficiency = mean(Net_Removal_Efficiency, na.rm = TRUE),
Avg_NCRR = mean(NCRR, na.rm = TRUE)
)
# Generate plots if requested
plot <- NULL
if (create_plots) {
plot <- summary %>%
ggplot(aes(x = year, y = .data[[metric]], color = scenario)) +
geom_line() +
facet_wrap(~ region, ncol = ncol, nrow = nrow) +
labs(
title = paste("Lifecycle Metrics: ", metric),
x = "Year",
y = metric
) +
theme_minimal()
}
# Save output if requested
if (!is.null(output_path) && output_type == "csv") {
write.csv(summary, file.path(output_path, "cdr_lifecycle_summary.csv"), row.names = FALSE)
}
# Return results and plot
return(list(summary = summary, plot = plot))
}
output_type <- match.arg(output_type, several.ok = TRUE)
#' Function to Calculate and Summarize CDR Lifecycle Metrics
#'
#' This function estimates lifecycle emissions metrics for Carbon Dioxide Removal (CDR) technologies
#' based on a supplied database and includes options for filtering, visualization, and saving results.
#'
#' @param db_path Path to the GCAM database.
#' @param db_name Name of the GCAM database.
#' @param dat_file Name of the .dat file to load.
#' @param scenario_list List of scenarios to include.
#' @param region_list List of regions to filter, default is all regions.
#' @param output_path Path to save output files.
#' @param output_type Output format, either "csv" or "list". Default is "list".
#' @param create_plots Logical, if TRUE, generates plots for the results. Default is TRUE.
#' @param metric The metric to visualize in plots. One of "Total_Lifecycle_Emissions",
#'   "Net_Removal_Efficiency", "NCRR". Default is "NCRR".
#' @param ncol Number of columns for the facets in the plots. Default is 2.
#' @param nrow Number of rows for the facets in the plots. Default is NULL.
#' @param selected_years For time-based visualizations, a vector of years to include, or NULL for all years.
#' @return A list containing the calculated lifecycle metrics.
#' @import dplyr rgcam ggplot2
#' @export
calculate_cdr_lifecycle_metrics <- function(db_path,
db_name,
dat_file,
scenario_list,
region_list = NULL,
output_path,
output_type = c("csv", "list"),
create_plots = TRUE,
metric = "NCRR",
ncol = 2,
nrow = NULL,
selected_years = NULL) {
# Validate output_type
output_type <- match.arg(output_type, several.ok = TRUE)
# Validate output path
if (!dir.exists(output_path)) {
stop("The specified output_path does not exist.")
}
# Define the CDR query directly in the function
CDR_query <- "<?xml version='1.0'?>
<queries>
<aQuery>
<all-regions/>
<supplyDemandQuery title='CDR by tech'>
<axis1 name='technology'>technology</axis1>
<axis2 name='Year'>physical-output[@vintage]</axis2>
<xPath buildList='true' dataName='output' group='false' sumAll='false'>
*[@type='sector' and @name='CDR_regional']/*[@type='subsector']/*[@type='technology' and not(@name='unsatisfied CDR demand')]/physical-output/node()
</xPath>
</supplyDemandQuery>
</aQuery>
</queries>"
# Create a temporary XML file for the query
query_file <- tempfile(fileext = ".xml")
writeLines(CDR_query, query_file)
# Establish database connection and add scenario
CDR_tech <- addScenario(localDBConn(db_path, db_name), paste0(dat_file, ".dat"), scenario_list, query_file)
# Query the database for CDR outputs
CDR_Output <- getQuery(CDR_tech, "CDR by tech")
# Filter by region if region_list is provided
if (!is.null(region_list)) {
CDR_Output <- CDR_Output %>% filter(region %in% region_list)
}
# Load the CDR_Lifecycle dataset from the package
data("CDR_Lifecycle", package = "CDRLifecycleAnalysis")
# Helper function to calculate lifecycle metrics
calculate_metrics <- function(data) {
data %>%
group_by(across(-value)) %>%
summarize(
Total_Lifecycle_Emissions = sum(Total_Lifecycle_Emissions * value, na.rm = TRUE),
Avg_Net_Removal_Efficiency = mean(Net_Removal_Efficiency * value, na.rm = TRUE),
Avg_NCRR = mean(NCRR * value, na.rm = TRUE),
.groups = "drop"
)
}
# Join the CDR Output with lifecycle metrics data
joined_data <- dplyr::left_join(CDR_Output, CDR_Lifecycle, by = c("technology" = "Technology"))
# Calculate metrics by year, technology, and region
Metrics_total_year <- calculate_metrics(joined_data %>% group_by(scenario, region, year))
Metrics_by_tech_year <- calculate_metrics(joined_data %>% group_by(scenario, region, technology, year))
Metrics_cum_tech <- calculate_metrics(joined_data %>% group_by(scenario, region, technology))
Metrics_cum_total <- calculate_metrics(joined_data %>% group_by(scenario, region))
# Save CSVs if specified
if ("csv" %in% output_type) {
write.csv(Metrics_total_year, file.path(output_path, "Metrics_total_year.csv"), row.names = FALSE)
write.csv(Metrics_by_tech_year, file.path(output_path, "Metrics_by_tech_year.csv"), row.names = FALSE)
write.csv(Metrics_cum_tech, file.path(output_path, "Metrics_cum_tech.csv"), row.names = FALSE)
write.csv(Metrics_cum_total, file.path(output_path, "Metrics_cum_total.csv"), row.names = FALSE)
}
results <- list(
Metrics_total_year = Metrics_total_year,
Metrics_by_tech_year = Metrics_by_tech_year,
Metrics_cum_tech = Metrics_cum_tech,
Metrics_cum_total = Metrics_cum_total
)
# Create plots if requested
if (create_plots) {
message("Generating and saving visualizations...")
# Visualize cumulative metrics by technology
visualize_results(
data = Metrics_cum_tech,
type = "cum_tech",
metric = metric,
selected_scenarios = scenario_list,
selected_regions = region_list,
ncol = ncol,
nrow = nrow,
output_path = output_path
)
# Visualize total metrics by year
visualize_results(
data = Metrics_total_year,
type = "total_year",
metric = metric,
selected_scenarios = scenario_list,
selected_regions = region_list,
selected_years = selected_years,
ncol = ncol,
nrow = nrow,
output_path = output_path
)
}
# Return results as a list if specified
if ("list" %in% output_type || length(output_type) == 0) {
return(results)
}
}
#' Visualize Lifecycle Metrics Results
#'
#' Creates faceted plots for CDR lifecycle metrics results.
#'
#' @param data The dataset to visualize.
#' @param type The type of visualization. One of "total_year" or "cum_tech".
#' @param metric The lifecycle metric to visualize. One of "Total_Lifecycle_Emissions",
#'   "Net_Removal_Efficiency", "NCRR".
#' @param selected_scenarios A vector of scenario names to include, or NULL for all.
#' @param selected_regions A vector of region names to include, or NULL for all.
#' @param selected_years A vector of years to include (for "total_year"), or NULL for all.
#' @param ncol Number of columns for the facets.
#' @param nrow Number of rows for the facets. If NULL, rows are determined dynamically by ggplot2.
#' @param output_path The directory where plots will be saved as PNG files.
#' @examples
#' visualize_results(data = results$Metrics_total_year, type = "total_year", metric = "NCRR")
visualize_results <- function(data,
type = c("total_year", "cum_tech"),
metric = c("Total_Lifecycle_Emissions", "Net_Removal_Efficiency", "NCRR"),
selected_scenarios = NULL,
selected_regions = NULL,
selected_years = NULL,
ncol = 2,
nrow = NULL,
output_path = getwd()) {
type <- match.arg(type)
metric <- match.arg(metric)
# Validate output path
if (!dir.exists(output_path)) {
stop("The specified output_path does not exist.")
}
# Ensure the data is a data frame
if (!is.data.frame(data)) {
stop("The provided data is not a valid data frame.")
}
# Filter data based on user selections
if (!is.null(selected_scenarios)) {
data <- data[data$scenario %in% selected_scenarios, ]
}
if (!is.null(selected_regions)) {
data <- data[data$region %in% selected_regions, ]
}
if (!is.null(selected_years) && "year" %in% colnames(data)) {
data <- data[data$year %in% selected_years, ]
}
# Ensure data is ordered by year for proper line plotting
if (type == "total_year") {
data <- dplyr::arrange(data, scenario, region, year)
}
# Define theme for all plots
custom_theme <- theme(
legend.position = "none",
legend.title = element_blank(),
axis.text.x = element_text(size = 8, color = "black", face = "bold", angle = 0, hjust = 0.4),
axis.text.y = element_text(size = 8, color = "black", face = "bold"),
axis.title.y = element_text(size = 8, color = "black", face = "bold"),
plot.title = element_text(size = 10, color = "darkred", face = "bold"),
plot.subtitle = element_text(size = 10, color = "darkgreen", face = "italic"),
plot.caption = element_text(size = 10, color = "purple", face = "italic"),
strip.text = element_text(size = 10, color = "black", face = "bold"),
legend.text = element_text(size = 12, face = "bold"),
panel.border = element_rect(colour = "black", fill = NA, size = 0.2),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.spacing = unit(1.5, "lines")
)
# Plot based on type
if (type == "cum_tech") {
p <- ggplot(data, aes(x = technology, y = .data[[metric]])) +
geom_bar(stat = "identity", fill = "lightblue") +
facet_grid(region ~ scenario, scales = "free_y") +
labs(title = "Cumulative Metrics by Technology",
x = "Technology",
y = metric) +
custom_theme
} else if (type == "total_year") {
p <- ggplot(data, aes(x = year, y = .data[[metric]])) +
geom_bar(stat = "identity", fill = "lightblue") +
facet_grid(region ~ scenario, scales = "free_y") +
labs(title = "Total Metrics by Year",
x = "Year",
y = metric) +
custom_theme
}
# Save plot
file_name <- paste0(type, "_facet_plot.png")
ggsave(filename = file.path(output_path, file_name),
plot = p, width = 10, height = 8)
# Return plot for optional interactive use
return(p)
}
#' Shiny App for Viewing CDR Lifecycle Metrics
#'
#' Launches a Shiny app to interactively view CDR lifecycle metrics results.
#'
#' @param results A list of datasets to visualize.
#' @examples
#' run_shiny_app(results)
#' @export
run_shiny_app <- function(output_path) {
library(shiny)
library(ggplot2)
library(dplyr)
# Load the provided CSV files from the user-specified output path
Metrics_cum_total_data <- read.csv(file.path(output_path, "Metrics_cum_total.csv"))
Metrics_total_year_data <- read.csv(file.path(output_path, "Metrics_total_year.csv"))
# Create a list of datasets
results <- list(
Metrics_cum_total = Metrics_cum_total_data,
Metrics_total_year = Metrics_total_year_data
)
ui <- fluidPage(
titlePanel("CDR Lifecycle Metrics Viewer"),
sidebarLayout(
sidebarPanel(
selectInput("dataset", "Select Dataset:", choices = if (length(results) > 0) names(results) else "No data available"),
selectInput("type", "Select Visualization Type:", choices = c("total_year", "cum_tech")),
selectInput("metric", "Select Metric:", choices = c("Total_Lifecycle_Emissions", "Net_Removal_Efficiency", "NCRR")),
uiOutput("scenario_ui"),
uiOutput("region_ui"),
numericInput("ncol", "Number of Columns for Facets:", value = 2, min = 1),
numericInput("nrow", "Number of Rows for Facets:", value = 2, min = 1)
),
mainPanel(
plotOutput("metricPlot")
)
)
)
server <- function(input, output, session) {
observe({
if (input$dataset == "No data available") {
output$metricPlot <- renderPlot({
plot.new()
text(0.5, 0.5, "No data available", cex = 1.5)
})
return()
}
})
selected_data <- reactive({
req(input$dataset)
data <- results[[input$dataset]]
if (!is.data.frame(data)) {
data <- as.data.frame(data)
}
data
})
output$scenario_ui <- renderUI({
req(selected_data())
selectInput("selected_scenarios", "Select Scenarios:",
choices = unique(selected_data()$scenario),
selected = unique(selected_data()$scenario),
multiple = TRUE)
})
output$region_ui <- renderUI({
req(selected_data())
selectInput("selected_regions", "Select Regions:",
choices = unique(selected_data()$region),
selected = unique(selected_data()$region),
multiple = TRUE)
})
output$metricPlot <- renderPlot({
req(selected_data())
filtered_data <- selected_data()
if (!is.null(input$selected_scenarios)) {
filtered_data <- filtered_data[filtered_data$scenario %in% input$selected_scenarios, ]
}
if (!is.null(input$selected_regions)) {
filtered_data <- filtered_data[filtered_data$region %in% input$selected_regions, ]
}
visualize_results(
data = filtered_data,
type = input$type,
metric = input$metric,
selected_scenarios = input$selected_scenarios,
selected_regions = input$selected_regions,
ncol = input$ncol,
nrow = input$nrow,
output_path = tempdir()
)
})
}
shinyApp(ui = ui, server = server)
}
setwd("C:/Package/R/CDRLifecycleAnalysis")
devtools::document()
rm(list = c("calculate_cdr_lifecycle_metrics"))
devtools::load_all()
getAnywhere(calculate_cdr_lifecycle_metrics)
library(CDRLifecycleAnalysis)
calculate_cdr_lifecycle_metrics(...)
library(CDRLifecycleAnalysis)
devtools::document()
devtools::build()
devtools::install()
library(CDRLifecycleAnalysis)
devtools::check()
remove.packages("CDRLifecycleAnalysis")
setwd("C:/Package/R/CDRLifecycleAnalysis")
devtools::document()
devtools::document()
devtools::document()
remove.packages("CDRLifecycleAnalysis")
setwd("C:/Package/R/CDRLifecycleAnalysis")
devtools::document()
remove.packages("CDRLifecycleAnalysis")
setwd("C:/Package/R/CDRLifecycleAnalysis")
devtools::document()
search()
installed.packages()["CDRLifecycleAnalysis", ]
q()
